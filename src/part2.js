// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("rescript/lib/js/list.js");
var Path = require("path");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Js_option = require("rescript/lib/js/js_option.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var filepath = Path.resolve("src", "input.txt");

function getFileContents(filepath) {
  return Fs.readFileSync(filepath, "utf8");
}

function getBingoBoardFromInput(str) {
  return str.split(/\n/).filter(Js_option.isSome).map(Js_option.getExn);
}

function getBingoNumbers(filepath) {
  return Belt_List.fromArray(Js_option.getWithDefault("", Caml_option.undefined_to_opt(Fs.readFileSync(filepath, "utf8").split(/\n/, 1).map(function (__x) {
                                    return Js_option.getWithDefault("", __x);
                                  }).shift())).split(",").map(Belt_Int.fromString).filter(Belt_Option.isSome).map(Belt_Option.getExn));
}

function getBingoBoards(filepath) {
  return Belt_List.map(Js_option.getWithDefault(/* [] */0, Belt_List.drop(Belt_List.fromArray(Fs.readFileSync(filepath, "utf8").split(/\n\n/).map(Js_option.getExn)), 1)), (function (x) {
                return Belt_List.fromArray(x.split(/\n/).map(function (__x) {
                                  return Belt_Option.getWithDefault(__x, "");
                                }).map(function (xs) {
                                return Belt_List.fromArray(xs.split(" ").map(Belt_Int.fromString).filter(Belt_Option.isSome).map(Belt_Option.getExn));
                              }));
              }));
}

var bingoNumbers = getBingoNumbers(filepath);

var bingoBoards = getBingoBoards(filepath);

function transpose(ls) {
  if (ls && ls.hd) {
    return {
            hd: List.map(List.hd, ls),
            tl: transpose(List.map(List.tl, ls))
          };
  } else {
    return /* [] */0;
  }
}

function checkBoard(numbers, _board) {
  while(true) {
    var board = _board;
    if (!board) {
      return ;
    }
    var first = board.hd;
    if (checkRow(numbers, first)) {
      return first;
    }
    _board = board.tl;
    continue ;
  };
}

function checkBoards(numbers, _boards) {
  while(true) {
    var boards = _boards;
    if (!boards) {
      return ;
    }
    var first = boards.hd;
    var fullBoard = Belt_List.concat(first, transpose(first));
    var match = checkBoard(numbers, fullBoard);
    if (match !== undefined) {
      return Belt_List.keep(Belt_List.flatten(first), (function (num) {
                    return Belt_List.has(numbers, num, (function (a, b) {
                                  return a === b;
                                })) === false;
                  }));
    }
    _boards = boards.tl;
    continue ;
  };
}

function checkRow(numbers, _row) {
  while(true) {
    var row = _row;
    if (!row) {
      return true;
    }
    if (!Belt_List.has(numbers, row.hd, (function (a, b) {
              return a === b;
            }))) {
      return false;
    }
    _row = row.tl;
    continue ;
  };
}

function drawNumbers(_numbers, boards, _drawnNumbers) {
  while(true) {
    var drawnNumbers = _drawnNumbers;
    var numbers = _numbers;
    var row = checkBoards(drawnNumbers, boards);
    if (row !== undefined) {
      return [
              Belt_Option.getExn(Belt_List.head(drawnNumbers)),
              row
            ];
    }
    if (!numbers) {
      return ;
    }
    _drawnNumbers = {
      hd: numbers.hd,
      tl: drawnNumbers
    };
    _numbers = numbers.tl;
    continue ;
  };
}

function processInput(numbers, boards) {
  var numbers$1 = drawNumbers(numbers, boards, /* [] */0);
  if (numbers$1 !== undefined) {
    return String(Math.imul(numbers$1[0], Belt_List.reduce(numbers$1[1], 0, (function (acc, num) {
                          return acc + num | 0;
                        }))));
  } else {
    return "No winners";
  }
}

console.log(processInput(bingoNumbers, bingoBoards));

exports.filepath = filepath;
exports.getFileContents = getFileContents;
exports.getBingoBoardFromInput = getBingoBoardFromInput;
exports.getBingoNumbers = getBingoNumbers;
exports.getBingoBoards = getBingoBoards;
exports.bingoNumbers = bingoNumbers;
exports.bingoBoards = bingoBoards;
exports.transpose = transpose;
exports.processInput = processInput;
exports.drawNumbers = drawNumbers;
exports.checkBoards = checkBoards;
exports.checkBoard = checkBoard;
exports.checkRow = checkRow;
/* filepath Not a pure module */
